
          import React, { useState, useEffect } from 'react';
          import { View, Text, StyleSheet, ScrollView, StatusBar, TouchableOpacity, TextInput, Alert, Modal, Dimensions } from 'react-native';

          const { width, height } = Dimensions.get('window');

          interface Budget {
            id: string;
            name: string;
            amount: number;
            spent: number;
            category: string;
          }

          interface Expense {
            id: string;
            budgetId: string;
            description: string;
            amount: number;
            category: string;
            date: string;
          }

          interface Challenge {
            id: string;
            title: string;
            description: string;
            points: number;
            completed: boolean;
            type: string;
          }

          interface Achievement {
            id: string;
            title: string;
            description: string;
            unlocked: boolean;
            icon: string;
          }

          const App = () => {
            const [showWelcome, setShowWelcome] = useState(true);
            const [currentScreen, setCurrentScreen] = useState('dashboard');
            const [budgets, setBudgets] = useState<Budget[]>([]);
            const [expenses, setExpenses] = useState<Expense[]>([]);
            const [challenges, setChallenges] = useState<Challenge[]>([]);
            const [achievements, setAchievements] = useState<Achievement[]>([]);
            const [userPoints, setUserPoints] = useState(0);
            const [userLevel, setUserLevel] = useState(1);
            const [budgetName, setBudgetName] = useState('');
            const [budgetAmount, setBudgetAmount] = useState('');
            const [budgetCategory, setBudgetCategory] = useState('‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø');
            const [expenseDesc, setExpenseDesc] = useState('');
            const [expenseAmount, setExpenseAmount] = useState('');
            const [expenseCategory, setExpenseCategory] = useState('‡§ñ‡§æ‡§®‡§æ');
            const [selectedBudget, setSelectedBudget] = useState('');
            const [showAchievement, setShowAchievement] = useState(false);
            const [currentAchievement, setCurrentAchievement] = useState<Achievement | null>(null);
            const [showInterstitialAd, setShowInterstitialAd] = useState(false);
            const [expenseCount, setExpenseCount] = useState(0);
            const [isPremium, setIsPremium] = useState(false);

            const categories = ['‡§ñ‡§æ‡§®‡§æ', '‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ', '‡§ï‡§ø‡§®‡§Æ‡•á‡§≤', '‡§Æ‡§®‡•ã‡§∞‡§û‡•ç‡§ú‡§®', '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø', '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ', '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø'];
            const budgetCategories = ['‡§Æ‡§æ‡§∏‡§ø‡§ï', '‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï', '‡§¶‡•à‡§®‡§ø‡§ï', '‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï', '‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø'];

            useEffect(() => {
              initializeChallenges();
              initializeAchievements();
            }, []);

            const initializeChallenges = () => {
              const defaultChallenges: Challenge[] = [
                {
                  id: '1',
                  title: '‡§™‡§π‡§ø‡§≤‡•ã ‡§¨‡§ú‡•á‡§ü',
                  description: '‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§™‡§π‡§ø‡§≤‡•ã ‡§¨‡§ú‡•á‡§ü ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç',
                  points: 100,
                  completed: false,
                  type: 'budget'
                },
                {
                  id: '2', 
                  title: '‡§¶‡•à‡§®‡§ø‡§ï ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡§ø‡§Ç‡§ó',
                  description: '‡•≠ ‡§¶‡§ø‡§® ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç',
                  points: 200,
                  completed: false,
                  type: 'streak'
                },
                {
                  id: '3',
                  title: '‡§¨‡§ö‡§§ ‡§ó‡•Å‡§∞‡•Å',
                  description: '‡§¨‡§ú‡•á‡§ü‡§ï‡•ã ‡•´‡•¶% ‡§¨‡§ö‡§§ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç',
                  points: 300,
                  completed: false,
                  type: 'saving'
                }
              ];
              setChallenges(defaultChallenges);
            };

            const initializeAchievements = () => {
              const defaultAchievements: Achievement[] = [
                {
                  id: '1',
                  title: '‡§®‡•å‡§∏‡§ø‡§ñ‡§ø‡§Ø‡§æ',
                  description: '‡§™‡§π‡§ø‡§≤‡•ã ‡§¨‡§ú‡•á‡§ü ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§≠‡§Ø‡•ã',
                  unlocked: false,
                  icon: 'üèÜ'
                },
                {
                  id: '2',
                  title: '‡§¨‡§ö‡§§‡§ï‡§∞‡•ç‡§§‡§æ',
                  description: '‡•ß‡•¶‡•¶‡•¶ ‡§∞‡•Å‡§™‡•à‡§Ø‡§æ‡§Å ‡§¨‡§ö‡§§ ‡§ó‡§∞‡•ç‡§®‡•Å‡§≠‡§Ø‡•ã',
                  unlocked: false,
                  icon: 'üí∞'
                },
                {
                  id: '3',
                  title: '‡§Æ‡§π‡§æ‡§ó‡•Å‡§∞‡•Å',
                  description: '‡§∏‡§¨‡•à ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§π‡§∞‡•Ç ‡§™‡•Ç‡§∞‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§≠‡§Ø‡•ã',
                  unlocked: false,
                  icon: 'üëë'
                }
              ];
              setAchievements(defaultAchievements);
            };

            const checkAchievements = () => {
              if (budgets.length >= 1 && !achievements[0].unlocked) {
                unlockAchievement(achievements[0]);
              }
              if (userPoints >= 500 && !achievements[1].unlocked) {
                unlockAchievement(achievements[1]);
              }
              if (challenges.every(c => c.completed) && !achievements[2].unlocked) {
                unlockAchievement(achievements[2]);
              }
            };

            const unlockAchievement = (achievement: Achievement) => {
              const updatedAchievements = achievements.map(a => 
                a.id === achievement.id ? { ...a, unlocked: true } : a
              );
              setAchievements(updatedAchievements);
              setCurrentAchievement(achievement);
              setShowAchievement(true);
            };

            const completeChallenge = (challengeId: string) => {
              const updatedChallenges = challenges.map(c => 
                c.id === challengeId ? { ...c, completed: true } : c
              );
              setChallenges(updatedChallenges);
              const challenge = challenges.find(c => c.id === challengeId);
              if (challenge) {
                setUserPoints(prev => prev + challenge.points);
                Alert.alert('‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§™‡•Ç‡§∞‡§æ!', `‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ${challenge.points} ‡§Ö‡§Ç‡§ï ‡§™‡§æ‡§â‡§®‡•Å‡§≠‡§Ø‡•ã!`);
              }
            };

            const addBudget = () => {
              if (!budgetName || !budgetAmount) {
                Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§¨‡•à ‡§´‡§ø‡§≤‡•ç‡§°‡§π‡§∞‡•Ç ‡§≠‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
                return;
              }
              const newBudget: Budget = {
                id: Date.now().toString(),
                name: budgetName,
                amount: parseFloat(budgetAmount),
                spent: 0,
                category: budgetCategory
              };
              const newBudgets = [...budgets, newBudget];
              setBudgets(newBudgets);
              setBudgetName('');
              setBudgetAmount('');
              setBudgetCategory('‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø');
              
              // Complete first budget challenge
              if (budgets.length === 0) {
                completeChallenge('1');
              }
              
              checkAchievements();
              Alert.alert('‡§∏‡§´‡§≤', '‡§¨‡§ú‡•á‡§ü ‡§•‡§™‡§ø‡§Ø‡•ã!');
            };

            const addExpense = () => {
              if (!expenseDesc || !expenseAmount || !selectedBudget) {
                Alert.alert('‡§§‡•ç‡§∞‡•Å‡§ü‡§ø', '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§¨‡•à ‡§´‡§ø‡§≤‡•ç‡§°‡§π‡§∞‡•Ç ‡§≠‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç');
                return;
              }
              const newExpense: Expense = {
                id: Date.now().toString(),
                budgetId: selectedBudget,
                description: expenseDesc,
                amount: parseFloat(expenseAmount),
                category: expenseCategory,
                date: new Date().toLocaleDateString('ne-NP')
              };
              const newExpenses = [...expenses, newExpense];
              
              // Update budget spent amount
              const newBudgets = budgets.map(budget => 
                budget.id === selectedBudget 
                  ? { ...budget, spent: budget.spent + parseFloat(expenseAmount) }
                  : budget
              );
              
              setExpenses(newExpenses);
              setBudgets(newBudgets);
              setExpenseDesc('');
              setExpenseAmount('');
              setExpenseCategory('‡§ñ‡§æ‡§®‡§æ');
              
              // Increment expense count for ad display
              const newExpenseCount = expenseCount + 1;
              setExpenseCount(newExpenseCount);
              
              // Show interstitial ad every 5 expenses if not premium
              if (!isPremium && newExpenseCount % 5 === 0) {
                setShowInterstitialAd(true);
              }
              
              checkAchievements();
              Alert.alert('‡§∏‡§´‡§≤', '‡§ñ‡§∞‡•ç‡§ö ‡§•‡§™‡§ø‡§Ø‡•ã!');
            };

            // Welcome Screen (matches web version)
            const renderWelcome = () => (
              <View style={styles.welcomeContainer}>
                <ScrollView contentContainerStyle={styles.welcomeContent}>
                  <View style={styles.welcomeCard}>
                    <View style={styles.appLogo}>
                      <Text style={styles.logoIcon}>üí∞</Text>
                      <Text style={styles.appTitle}>‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§¨‡§ú‡•á‡§ü ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡§∞</Text>
                      <Text style={styles.appSubtitle}>‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§µ‡§ø‡§§‡•ç‡§§ ‡§∏‡§æ‡§•‡•Ä</Text>
                    </View>
                    
                    <View style={styles.nepaliMessage}>
                      <Text style={styles.messageText}>
                        ‡§Æ ‡§ö‡§æ‡§π‡§®‡•ç‡§õ‡•Å ‡§ï‡§ø ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§∏‡§Ç‡§∏‡§æ‡§∞‡§≤‡§æ‡§à ‡§∞‡§æ‡§Æ‡•ç‡§∞‡•ã‡§∏‡§Å‡§ó ‡§¨‡•Å‡§ù‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§∞ ‡§∏‡§π‡•Ä ‡§∞ ‡§ó‡§≤‡§§ ‡§õ‡•Å‡§ü‡•ç‡§Ø‡§æ‡§â‡§® ‡§∏‡§ï‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§§‡§™‡§æ‡§à‡§Ç‡§Æ‡§æ ‡§ó‡§π‡§ø‡§∞‡•ã ‡§ú‡•ç‡§û‡§æ‡§® ‡§π‡•ã‡§∏‡•ç ‡§∞ ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡•á ‡§∏‡§ß‡•à‡§Ç ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®‡•Ä ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø‡§π‡§∞‡•Ç ‡§≤‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
                      </Text>
                      <Text style={styles.messageAuthor}>- KissonFloyd</Text>
                    </View>
                    
                    <TouchableOpacity 
                      style={styles.thankYouButton}
                      onPress={() => setShowWelcome(false)}
                    >
                      <Text style={styles.thankYouText}>‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶</Text>
                      <Text style={styles.arrow}>‚Üí</Text>
                    </TouchableOpacity>
                  </View>
                </ScrollView>
              </View>
            );

            // Dashboard Home with comprehensive features
            const renderHome = () => (
              <ScrollView style={styles.container}>
                {/* Enhanced Header */}
                <View style={styles.dashboardHeader}>
                  <View style={styles.headerLeft}>
                    <Text style={styles.title}>‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§¨‡§ú‡•á‡§ü ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï‡§∞</Text>
                    <Text style={styles.subtitle}>{new Date().toLocaleDateString('ne-NP')}</Text>
                  </View>
                  <View style={styles.headerRight}>
                    {isPremium && (
                      <View style={styles.premiumBadge}>
                        <Text style={styles.premiumText}>üëë ‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ</Text>
                      </View>
                    )}
                    <View style={styles.userStats}>
                      <Text style={styles.statsText}>‡§∏‡•ç‡§§‡§∞: {userLevel}</Text>
                      <Text style={styles.statsText}>‡§Ö‡§Ç‡§ï: {userPoints}</Text>
                    </View>
                  </View>
                </View>

                {/* Banner Ad */}
                {!isPremium && (
                  <View style={styles.bannerAd}>
                    <Text style={styles.adText}>üì± ‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° - ‡§ï‡•á‡§µ‡§≤ ‡§∞‡•Ç ‡•™‡•Ø‡•Ø/‡§Æ‡§π‡§ø‡§®‡§æ</Text>
                  </View>
                )}

                {/* Quick Stats */}
                <View style={styles.statsGrid}>
                  <View style={styles.statCard}>
                    <Text style={styles.statNumber}>{budgets.length}</Text>
                    <Text style={styles.statLabel}>‡§¨‡§ú‡•á‡§ü‡§π‡§∞‡•Ç</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statNumber}>{expenses.length}</Text>
                    <Text style={styles.statLabel}>‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statNumber}>‡§∞‡•Ç {expenses.reduce((sum, e) => sum + e.amount, 0).toLocaleString()}</Text>
                    <Text style={styles.statLabel}>‡§ï‡•Å‡§≤ ‡§ñ‡§∞‡•ç‡§ö</Text>
                  </View>
                </View>
                
                <View style={styles.content}>
                  <Text style={styles.sectionTitle}>‡§§‡§™‡§æ‡§à‡§ï‡§æ ‡§¨‡§ú‡•á‡§ü‡§π‡§∞‡•Ç</Text>
                  {budgets.length === 0 ? (
                    <View style={styles.emptyState}>
                      <Text style={styles.emptyIcon}>üí∞</Text>
                      <Text style={styles.emptyTitle}>‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ!</Text>
                      <Text style={styles.emptyText}>‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§™‡§π‡§ø‡§≤‡•ã ‡§¨‡§ú‡•á‡§ü ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§® "‡§¨‡§ú‡•á‡§ü" ‡§ü‡•ç‡§Ø‡§æ‡§¨‡§Æ‡§æ ‡§ú‡§æ‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                    </View>
                  ) : (
                    budgets.map(budget => {
                      const percentage = (budget.spent / budget.amount) * 100;
                      return (
                        <View key={budget.id} style={styles.budgetCard}>
                          <View style={styles.budgetHeader}>
                            <Text style={styles.budgetName}>{budget.name}</Text>
                            <Text style={styles.budgetCategory}>{budget.category}</Text>
                          </View>
                          <Text style={styles.budgetAmount}>‡§∞‡•Ç {budget.amount.toLocaleString()}</Text>
                          <View style={styles.progressBar}>
                            <View style={[styles.progressFill, { width: `${Math.min(percentage, 100)}%` }]} />
                          </View>
                          <View style={styles.budgetFooter}>
                            <Text style={styles.budgetSpent}>‡§ñ‡§∞‡•ç‡§ö: ‡§∞‡•Ç {budget.spent.toLocaleString()}</Text>
                            <Text style={styles.budgetRemaining}>‡§¨‡§æ‡§Å‡§ï‡•Ä: ‡§∞‡•Ç {(budget.amount - budget.spent).toLocaleString()}</Text>
                          </View>
                        </View>
                      );
                    })
                  )}

                  {/* Recent Expenses */}
                  {expenses.length > 0 && (
                    <View style={styles.recentSection}>
                      <Text style={styles.sectionTitle}>‡§π‡§æ‡§≤‡§ï‡§æ ‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç</Text>
                      {expenses.slice(-3).reverse().map(expense => (
                        <View key={expense.id} style={styles.expenseItem}>
                          <View style={styles.expenseLeft}>
                            <Text style={styles.expenseDesc}>{expense.description}</Text>
                            <Text style={styles.expenseCategory}>{expense.category} ‚Ä¢ {expense.date}</Text>
                          </View>
                          <Text style={styles.expenseAmount}>‡§∞‡•Ç {expense.amount.toLocaleString()}</Text>
                        </View>
                      ))}
                    </View>
                  )}
                </View>
              </ScrollView>
            );

            const renderBudgets = () => (
              <ScrollView style={styles.container}>
                <View style={styles.formContainer}>
                  <Text style={styles.formTitle}>‡§®‡§Ø‡§æ‡§Å ‡§¨‡§ú‡•á‡§ü ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                  <TextInput
                    style={styles.input}
                    placeholder="‡§¨‡§ú‡•á‡§ü‡§ï‡•ã ‡§®‡§æ‡§Æ"
                    value={budgetName}
                    onChangeText={setBudgetName}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="‡§∞‡§ï‡§Æ"
                    value={budgetAmount}
                    onChangeText={setBudgetAmount}
                    keyboardType="numeric"
                  />
                  
                  {/* Category Selector */}
                  <Text style={styles.label}>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä:</Text>
                  <View style={styles.categoryContainer}>
                    {budgetCategories.map(category => (
                      <TouchableOpacity
                        key={category}
                        style={[
                          styles.categoryButton,
                          budgetCategory === category && styles.selectedCategory
                        ]}
                        onPress={() => setBudgetCategory(category)}
                      >
                        <Text style={[
                          styles.categoryText,
                          budgetCategory === category && styles.selectedCategoryText
                        ]}>
                          {category}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                  
                  <TouchableOpacity style={styles.button} onPress={addBudget}>
                    <Text style={styles.buttonText}>‡§¨‡§ú‡•á‡§ü ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                  </TouchableOpacity>
                </View>

                {/* Existing Budgets */}
                <View style={styles.existingBudgets}>
                  <Text style={styles.sectionTitle}>‡§Ö‡§µ‡§∏‡•ç‡§•‡§ø‡§§ ‡§¨‡§ú‡•á‡§ü‡§π‡§∞‡•Ç</Text>
                  {budgets.map(budget => (
                    <View key={budget.id} style={styles.budgetItem}>
                      <View style={styles.budgetInfo}>
                        <Text style={styles.budgetName}>{budget.name}</Text>
                        <Text style={styles.budgetCategory}>{budget.category}</Text>
                      </View>
                      <View style={styles.budgetAmounts}>
                        <Text style={styles.budgetTotal}>‡§∞‡•Ç {budget.amount.toLocaleString()}</Text>
                        <Text style={styles.budgetSpent}>‡§ñ‡§∞‡•ç‡§ö: ‡§∞‡•Ç {budget.spent.toLocaleString()}</Text>
                      </View>
                    </View>
                  ))}
                </View>
              </ScrollView>
            );

            const renderExpenses = () => (
              <ScrollView style={styles.container}>
                <View style={styles.formContainer}>
                  <Text style={styles.formTitle}>‡§®‡§Ø‡§æ‡§Å ‡§ñ‡§∞‡•ç‡§ö ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                  <Text style={styles.label}>‡§¨‡§ú‡•á‡§ü ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:</Text>
                  {budgets.map(budget => (
                    <TouchableOpacity
                      key={budget.id}
                      style={[styles.budgetOption, selectedBudget === budget.id && styles.selectedBudget]}
                      onPress={() => setSelectedBudget(budget.id)}
                    >
                      <Text style={styles.budgetOptionText}>{budget.name}</Text>
                    </TouchableOpacity>
                  ))}
                  <TextInput
                    style={styles.input}
                    placeholder="‡§ñ‡§∞‡•ç‡§ö‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£"
                    value={expenseDesc}
                    onChangeText={setExpenseDesc}
                  />
                  <TextInput
                    style={styles.input}
                    placeholder="‡§∞‡§ï‡§Æ"
                    value={expenseAmount}
                    onChangeText={setExpenseAmount}
                    keyboardType="numeric"
                  />
                  <TouchableOpacity style={styles.button} onPress={addExpense}>
                    <Text style={styles.buttonText}>‡§ñ‡§∞‡•ç‡§ö ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                  </TouchableOpacity>
                </View>

                <View style={styles.expensesList}>
                  <Text style={styles.formTitle}>‡§π‡§æ‡§≤‡§ï‡§æ ‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç</Text>
                  {expenses.slice(-5).reverse().map(expense => (
                    <View key={expense.id} style={styles.expenseCard}>
                      <Text style={styles.expenseDesc}>{expense.description}</Text>
                      <Text style={styles.expenseAmount}>‡§∞‡•Ç {expense.amount.toLocaleString()}</Text>
                      <Text style={styles.expenseDate}>{expense.date}</Text>
                    </View>
                  ))}
                </View>
              </ScrollView>
            );

            // Analytics Screen (matching web version)
            const renderAnalytics = () => (
              <ScrollView style={styles.container}>
                <Text style={styles.pageTitle}>üìä ‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£</Text>
                
                {/* Summary Cards */}
                <View style={styles.analyticsGrid}>
                  <View style={styles.analyticsCard}>
                    <Text style={styles.analyticsNumber}>‡§∞‡•Ç {expenses.reduce((sum, e) => sum + e.amount, 0).toLocaleString()}</Text>
                    <Text style={styles.analyticsLabel}>‡§ï‡•Å‡§≤ ‡§ñ‡§∞‡•ç‡§ö</Text>
                  </View>
                  <View style={styles.analyticsCard}>
                    <Text style={styles.analyticsNumber}>{expenses.length}</Text>
                    <Text style={styles.analyticsLabel}>‡§ï‡•Å‡§≤ ‡§≤‡•á‡§®‡§¶‡•á‡§®</Text>
                  </View>
                  <View style={styles.analyticsCard}>
                    <Text style={styles.analyticsNumber}>‡§∞‡•Ç {expenses.length > 0 ? Math.round(expenses.reduce((sum, e) => sum + e.amount, 0) / expenses.length).toLocaleString() : 0}</Text>
                    <Text style={styles.analyticsLabel}>‡§î‡§∏‡§§ ‡§ñ‡§∞‡•ç‡§ö</Text>
                  </View>
                </View>

                {/* Category Breakdown */}
                <View style={styles.categoryBreakdown}>
                  <Text style={styles.sectionTitle}>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö</Text>
                  {categories.map(category => {
                    const categoryExpenses = expenses.filter(e => e.category === category);
                    const categoryTotal = categoryExpenses.reduce((sum, e) => sum + e.amount, 0);
                    const percentage = expenses.length > 0 ? (categoryTotal / expenses.reduce((sum, e) => sum + e.amount, 0)) * 100 : 0;
                    
                    if (categoryTotal === 0) return null;
                    
                    return (
                      <View key={category} style={styles.categoryItem}>
                        <View style={styles.categoryHeader}>
                          <Text style={styles.categoryName}>{category}</Text>
                          <Text style={styles.categoryAmount}>‡§∞‡•Ç {categoryTotal.toLocaleString()}</Text>
                        </View>
                        <View style={styles.categoryBar}>
                          <View style={[styles.categoryProgress, { width: `${percentage}%` }]} />
                        </View>
                        <Text style={styles.categoryPercentage}>{percentage.toFixed(1)}%</Text>
                      </View>
                    );
                  })}
                </View>

                {/* Insights */}
                <View style={styles.insights}>
                  <Text style={styles.sectionTitle}>üí° ‡§Ö‡§®‡•ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø</Text>
                  <View style={styles.insightCard}>
                    <Text style={styles.insightText}>
                      ‡§§‡§™‡§æ‡§à‡§Ç‡§ï‡•ã ‡§∏‡§¨‡•à‡§≠‡§®‡•ç‡§¶‡§æ ‡§ß‡•á‡§∞‡•à ‡§ñ‡§∞‡•ç‡§ö {expenses.length > 0 
                        ? categories.reduce((max, cat) => {
                            const catTotal = expenses.filter(e => e.category === cat).reduce((sum, e) => sum + e.amount, 0);
                            const maxTotal = expenses.filter(e => e.category === max).reduce((sum, e) => sum + e.amount, 0);
                            return catTotal > maxTotal ? cat : max;
                          })
                        : '‡§ï‡•Å‡§®‡•à'} ‡§Æ‡§æ ‡§õ‡•§
                    </Text>
                  </View>
                </View>
              </ScrollView>
            );

            // Budget Challenges (matching web version)
            const renderChallenges = () => (
              <ScrollView style={styles.container}>
                <Text style={styles.pageTitle}>üèÜ ‡§¨‡§ú‡•á‡§ü ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§π‡§∞‡•Ç</Text>
                
                {/* User Progress */}
                <View style={styles.userProgress}>
                  <View style={styles.progressHeader}>
                    <Text style={styles.userLevel}>‡§∏‡•ç‡§§‡§∞ {userLevel}</Text>
                    <Text style={styles.userPoints}>{userPoints} ‡§Ö‡§Ç‡§ï</Text>
                  </View>
                  <View style={styles.levelProgress}>
                    <View style={[styles.levelBar, { width: `${(userPoints % 500) / 5}%` }]} />
                  </View>
                  <Text style={styles.nextLevel}>‡§Ö‡§∞‡•ç‡§ï‡•ã ‡§∏‡•ç‡§§‡§∞‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø {500 - (userPoints % 500)} ‡§Ö‡§Ç‡§ï ‡§ö‡§æ‡§π‡§ø‡§®‡•ç‡§õ</Text>
                </View>

                {/* Challenges List */}
                <View style={styles.challengesList}>
                  <Text style={styles.sectionTitle}>‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä‡§π‡§∞‡•Ç</Text>
                  {challenges.map(challenge => (
                    <View key={challenge.id} style={[
                      styles.challengeCard,
                      challenge.completed && styles.completedChallenge
                    ]}>
                      <View style={styles.challengeHeader}>
                        <Text style={styles.challengeTitle}>{challenge.title}</Text>
                        <Text style={styles.challengePoints}>{challenge.points} ‡§Ö‡§Ç‡§ï</Text>
                      </View>
                      <Text style={styles.challengeDesc}>{challenge.description}</Text>
                      {challenge.completed && (
                        <View style={styles.completedBadge}>
                          <Text style={styles.completedText}>‚úÖ ‡§™‡•Ç‡§∞‡•ç‡§£</Text>
                        </View>
                      )}
                    </View>
                  ))}
                </View>
              </ScrollView>
            );

            // Financial Tips (matching web version)
            const renderTips = () => (
              <ScrollView style={styles.container}>
                <Text style={styles.pageTitle}>üí° ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ‡§π‡§∞‡•Ç</Text>
                
                <View style={styles.tipsList}>
                  <View style={styles.tipCard}>
                    <Text style={styles.tipTitle}>üéØ ‡§¨‡§ú‡•á‡§ü ‡§¨‡§®‡§æ‡§â‡§®‡•Å</Text>
                    <Text style={styles.tipContent}>
                      ‡§π‡§∞‡•á‡§ï ‡§Æ‡§π‡§ø‡§®‡§æ ‡§Ü‡§´‡•ç‡§®‡•ã ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ ‡§¨‡§ú‡•á‡§ü ‡§¨‡§®‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç‡§≤‡§æ‡§à ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§¶‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
                    </Text>
                  </View>
                  
                  <View style={styles.tipCard}>
                    <Text style={styles.tipTitle}>üí∞ ‡§¨‡§ö‡§§ ‡§ó‡§∞‡•ç‡§®‡•Å</Text>
                    <Text style={styles.tipContent}>
                      ‡§Ü‡§´‡•ç‡§®‡•ã ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä‡§ï‡•ã ‡§ï‡§Æ‡•ç‡§§‡§ø‡§Æ‡§æ ‡•®‡•¶% ‡§¨‡§ö‡§§ ‡§ó‡§∞‡•ç‡§®‡•á ‡§¨‡§æ‡§®‡•Ä ‡§¨‡§∏‡§æ‡§≤‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§∏‡§æ‡§®‡•ã ‡§∞‡§ï‡§Æ‡§¶‡•á‡§ñ‡§ø ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
                    </Text>
                  </View>
                  
                  <View style={styles.tipCard}>
                    <Text style={styles.tipTitle}>üìä ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•ç‡§Ø‡§æ‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å</Text>
                    <Text style={styles.tipContent}>
                      ‡§¶‡•à‡§®‡§ø‡§ï ‡§ñ‡§∞‡•ç‡§ö‡§π‡§∞‡•Ç‡§ï‡•ã ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∞‡§æ‡§ñ‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§Ø‡§∏‡§≤‡•á ‡§§‡§™‡§æ‡§à‡§Ç‡§≤‡§æ‡§à ‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§Æ ‡§ó‡§∞‡•ç‡§® ‡§Æ‡§¶‡•ç‡§¶‡§§ ‡§ó‡§∞‡•ç‡§õ‡•§
                    </Text>
                  </View>
                  
                  <View style={styles.tipCard}>
                    <Text style={styles.tipTitle}>üéØ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£</Text>
                    <Text style={styles.tipContent}>
                      ‡§õ‡•ã‡§ü‡•ã‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∞ ‡§¶‡•Ä‡§∞‡•ç‡§ò‡§ï‡§æ‡§≤‡•Ä‡§® ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡§π‡§∞‡•Ç ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§
                    </Text>
                  </View>
                </View>
              </ScrollView>
            );

            const renderCurrentScreen = () => {
              if (showWelcome) {
                return renderWelcome();
              }
              
              switch (currentScreen) {
                case 'budgets': return renderBudgets();
                case 'expenses': return renderExpenses();
                case 'analytics': return renderAnalytics();
                case 'challenges': return renderChallenges();
                case 'tips': return renderTips();
                default: return renderHome();
              }
            };

            return (
              <>
                <StatusBar barStyle="light-content" backgroundColor="#FF6B35" />
                {renderCurrentScreen()}
                
                {/* Enhanced Bottom Navigation with all features */}
                <View style={styles.bottomNav}>
                  <TouchableOpacity 
                    style={[styles.navButton, currentScreen === 'dashboard' && styles.activeNav]}
                    onPress={() => setCurrentScreen('dashboard')}
                  >
                    <Text style={styles.navIcon}>üè†</Text>
                    <Text style={styles.navText}>‡§ó‡•É‡§π</Text>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[styles.navButton, currentScreen === 'budgets' && styles.activeNav]}
                    onPress={() => setCurrentScreen('budgets')}
                  >
                    <Text style={styles.navIcon}>üí∞</Text>
                    <Text style={styles.navText}>‡§¨‡§ú‡•á‡§ü</Text>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[styles.navButton, currentScreen === 'expenses' && styles.activeNav]}
                    onPress={() => setCurrentScreen('expenses')}
                  >
                    <Text style={styles.navIcon}>üìã</Text>
                    <Text style={styles.navText}>‡§ñ‡§∞‡•ç‡§ö</Text>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[styles.navButton, currentScreen === 'analytics' && styles.activeNav]}
                    onPress={() => setCurrentScreen('analytics')}
                  >
                    <Text style={styles.navIcon}>üìä</Text>
                    <Text style={styles.navText}>‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£</Text>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[styles.navButton, currentScreen === 'challenges' && styles.activeNav]}
                    onPress={() => setCurrentScreen('challenges')}
                  >
                    <Text style={styles.navIcon}>üèÜ</Text>
                    <Text style={styles.navText}>‡§ö‡•Å‡§®‡•å‡§§‡•Ä</Text>
                  </TouchableOpacity>
                </View>

                {/* Achievement Notification Modal */}
                <Modal visible={showAchievement} transparent animationType="slide">
                  <View style={styles.modalOverlay}>
                    <View style={styles.achievementModal}>
                      <Text style={styles.achievementTitle}>üéâ ‡§¨‡§ß‡§æ‡§à ‡§õ!</Text>
                      <Text style={styles.achievementIcon}>{currentAchievement?.icon}</Text>
                      <Text style={styles.achievementName}>{currentAchievement?.title}</Text>
                      <Text style={styles.achievementDesc}>{currentAchievement?.description}</Text>
                      <TouchableOpacity 
                        style={styles.achievementButton}
                        onPress={() => setShowAchievement(false)}
                      >
                        <Text style={styles.achievementButtonText}>‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                </Modal>

                {/* Interstitial Ad Modal */}
                <Modal visible={showInterstitialAd} transparent animationType="fade">
                  <View style={styles.modalOverlay}>
                    <View style={styles.adModal}>
                      <TouchableOpacity 
                        style={styles.adClose}
                        onPress={() => setShowInterstitialAd(false)}
                      >
                        <Text style={styles.adCloseText}>‚úï</Text>
                      </TouchableOpacity>
                      <Text style={styles.adTitle}>‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                      <Text style={styles.adDescription}>
                        ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§™‡§® ‡§π‡§ü‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§∞ ‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§π‡§∞‡•Ç‡§ï‡•ã ‡§Ü‡§®‡§®‡•ç‡§¶ ‡§≤‡§ø‡§®‡•Å‡§π‡•ã‡§∏‡•ç
                      </Text>
                      <Text style={styles.adPrice}>‡§ï‡•á‡§µ‡§≤ ‡§∞‡•Ç ‡•™‡•Ø‡•Ø/‡§Æ‡§π‡§ø‡§®‡§æ</Text>
                      <TouchableOpacity 
                        style={styles.adUpgradeButton}
                        onPress={() => {
                          setIsPremium(true);
                          setShowInterstitialAd(false);
                          Alert.alert('‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø', '‡§§‡§™‡§æ‡§à‡§Ç ‡§Ö‡§¨ ‡§™‡•ç‡§∞‡§ø‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•Å‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ!');
                        }}
                      >
                        <Text style={styles.adUpgradeText}>‡§Ö‡§π‡§ø‡§≤‡•á ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                </Modal>
              </>
            );
          };

          const styles = StyleSheet.create({
            container: {
              flex: 1,
              backgroundColor: '#F8F9FA',
            },
            header: {
              backgroundColor: '#FF6B35',
              padding: 30,
              alignItems: 'center',
            },
            title: {
              fontSize: 28,
              fontWeight: 'bold',
              color: '#FFFFFF',
              marginBottom: 5,
            },
            subtitle: {
              fontSize: 16,
              color: '#FFE4D6',
            },
            content: {
              padding: 20,
              paddingBottom: 80,
            },
            sectionTitle: {
              fontSize: 24,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 15,
            },
            budgetCard: {
              backgroundColor: '#FFFFFF',
              padding: 20,
              marginBottom: 15,
              borderRadius: 12,
              elevation: 2,
            },
            budgetName: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 5,
            },
            budgetAmount: {
              fontSize: 16,
              color: '#27AE60',
              fontWeight: 'bold',
            },
            budgetSpent: {
              fontSize: 14,
              color: '#E74C3C',
            },
            budgetRemaining: {
              fontSize: 14,
              color: '#3498DB',
            },
            formContainer: {
              padding: 20,
            },
            formTitle: {
              fontSize: 20,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 20,
            },
            input: {
              borderWidth: 1,
              borderColor: '#BDC3C7',
              borderRadius: 8,
              padding: 12,
              marginBottom: 15,
              fontSize: 16,
            },
            button: {
              backgroundColor: '#FF6B35',
              padding: 15,
              borderRadius: 8,
              alignItems: 'center',
            },
            buttonText: {
              color: '#FFFFFF',
              fontSize: 16,
              fontWeight: 'bold',
            },
            label: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 10,
            },
            budgetOption: {
              padding: 12,
              borderWidth: 1,
              borderColor: '#BDC3C7',
              borderRadius: 8,
              marginBottom: 10,
            },
            selectedBudget: {
              backgroundColor: '#FF6B35',
            },
            budgetOptionText: {
              fontSize: 16,
              color: '#2C3E50',
            },
            expensesList: {
              padding: 20,
              paddingTop: 0,
            },
            expenseCard: {
              backgroundColor: '#FFFFFF',
              padding: 15,
              marginBottom: 10,
              borderRadius: 8,
              elevation: 1,
            },
            expenseDesc: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#2C3E50',
            },
            expenseAmount: {
              fontSize: 14,
              color: '#E74C3C',
            },
            expenseDate: {
              fontSize: 12,
              color: '#7F8C8D',
            },
            emptyText: {
              textAlign: 'center',
              color: '#7F8C8D',
              fontSize: 16,
              fontStyle: 'italic',
            },
            bottomNav: {
              flexDirection: 'row',
              backgroundColor: '#FFFFFF',
              borderTopWidth: 1,
              borderTopColor: '#E0E0E0',
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
            },
            navButton: {
              flex: 1,
              padding: 15,
              alignItems: 'center',
            },
            activeNav: {
              backgroundColor: '#FF6B35',
            },
            navText: {
              fontSize: 12,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginTop: 4,
            },
            navIcon: {
              fontSize: 16,
              marginBottom: 2,
            },
            
            // Welcome Screen Styles
            welcomeContainer: {
              flex: 1,
              backgroundColor: 'linear-gradient(135deg, #FFE4D6 0%, #E6D6FF 50%, #FFCCCB 100%)',
              justifyContent: 'center',
              padding: 20,
            },
            welcomeContent: {
              flexGrow: 1,
              justifyContent: 'center',
            },
            welcomeCard: {
              backgroundColor: '#FFFFFF',
              borderRadius: 20,
              padding: 40,
              shadowColor: '#000',
              shadowOffset: { width: 0, height: 8 },
              shadowOpacity: 0.3,
              shadowRadius: 15,
              elevation: 15,
            },
            appLogo: {
              alignItems: 'center',
              marginBottom: 30,
            },
            logoIcon: {
              fontSize: 48,
              marginBottom: 16,
            },
            appTitle: {
              fontSize: 32,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 8,
              textAlign: 'center',
            },
            appSubtitle: {
              fontSize: 16,
              color: '#7F8C8D',
              textAlign: 'center',
            },
            nepaliMessage: {
              backgroundColor: '#F8F9FA',
              padding: 24,
              borderRadius: 12,
              borderLeftWidth: 4,
              borderLeftColor: '#FF6B35',
              marginBottom: 30,
            },
            messageText: {
              fontSize: 18,
              lineHeight: 28,
              color: '#2C3E50',
              fontWeight: '500',
              textAlign: 'left',
              marginBottom: 16,
            },
            messageAuthor: {
              fontSize: 14,
              color: '#7F8C8D',
              fontWeight: '600',
              textAlign: 'right',
            },
            thankYouButton: {
              flexDirection: 'row',
              backgroundColor: '#FF6B35',
              paddingVertical: 16,
              paddingHorizontal: 32,
              borderRadius: 12,
              alignItems: 'center',
              justifyContent: 'center',
              shadowColor: '#FF6B35',
              shadowOffset: { width: 0, height: 4 },
              shadowOpacity: 0.3,
              shadowRadius: 8,
              elevation: 8,
            },
            thankYouText: {
              color: '#FFFFFF',
              fontSize: 18,
              fontWeight: 'bold',
              marginRight: 12,
            },
            arrow: {
              color: '#FFFFFF',
              fontSize: 18,
              fontWeight: 'bold',
            },

            // Enhanced Dashboard Styles
            dashboardHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              backgroundColor: '#FF6B35',
              padding: 20,
              paddingTop: 40,
            },
            headerLeft: {
              flex: 1,
            },
            headerRight: {
              alignItems: 'flex-end',
            },
            premiumBadge: {
              backgroundColor: '#FFD700',
              paddingHorizontal: 8,
              paddingVertical: 4,
              borderRadius: 12,
              marginBottom: 8,
            },
            premiumText: {
              fontSize: 12,
              fontWeight: 'bold',
              color: '#2C3E50',
            },
            userStats: {
              alignItems: 'flex-end',
            },
            statsText: {
              fontSize: 12,
              color: '#FFE4D6',
              marginBottom: 2,
            },
            bannerAd: {
              backgroundColor: '#3498DB',
              padding: 12,
              margin: 10,
              borderRadius: 8,
              alignItems: 'center',
            },
            adText: {
              color: '#FFFFFF',
              fontSize: 14,
              fontWeight: 'bold',
            },
            statsGrid: {
              flexDirection: 'row',
              padding: 20,
              paddingBottom: 10,
            },
            statCard: {
              flex: 1,
              backgroundColor: '#FFFFFF',
              padding: 16,
              marginHorizontal: 5,
              borderRadius: 12,
              alignItems: 'center',
              elevation: 2,
            },
            statNumber: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#FF6B35',
              marginBottom: 4,
            },
            statLabel: {
              fontSize: 12,
              color: '#7F8C8D',
            },
            emptyState: {
              alignItems: 'center',
              padding: 40,
              backgroundColor: '#FFFFFF',
              borderRadius: 12,
              marginVertical: 20,
            },
            emptyIcon: {
              fontSize: 48,
              marginBottom: 16,
            },
            emptyTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 8,
            },
            emptyText: {
              fontSize: 14,
              color: '#7F8C8D',
              textAlign: 'center',
              lineHeight: 20,
            },
            budgetHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 8,
            },
            budgetCategory: {
              fontSize: 12,
              color: '#FF6B35',
              backgroundColor: '#FFE4D6',
              paddingHorizontal: 8,
              paddingVertical: 2,
              borderRadius: 10,
            },
            progressBar: {
              height: 8,
              backgroundColor: '#E0E0E0',
              borderRadius: 4,
              marginVertical: 8,
            },
            progressFill: {
              height: '100%',
              backgroundColor: '#FF6B35',
              borderRadius: 4,
            },
            budgetFooter: {
              flexDirection: 'row',
              justifyContent: 'space-between',
            },
            recentSection: {
              marginTop: 20,
            },
            expenseItem: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              backgroundColor: '#FFFFFF',
              padding: 16,
              marginBottom: 8,
              borderRadius: 8,
              elevation: 1,
            },
            expenseLeft: {
              flex: 1,
            },
            expenseCategory: {
              fontSize: 12,
              color: '#7F8C8D',
              marginTop: 4,
            },

            // Enhanced Form Styles
            categoryContainer: {
              flexDirection: 'row',
              flexWrap: 'wrap',
              marginBottom: 15,
            },
            categoryButton: {
              paddingHorizontal: 12,
              paddingVertical: 8,
              borderWidth: 1,
              borderColor: '#BDC3C7',
              borderRadius: 20,
              margin: 4,
            },
            selectedCategory: {
              backgroundColor: '#FF6B35',
              borderColor: '#FF6B35',
            },
            categoryText: {
              fontSize: 14,
              color: '#2C3E50',
            },
            selectedCategoryText: {
              color: '#FFFFFF',
            },
            existingBudgets: {
              padding: 20,
              paddingTop: 0,
            },
            budgetItem: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              backgroundColor: '#FFFFFF',
              padding: 16,
              marginBottom: 12,
              borderRadius: 8,
              elevation: 2,
            },
            budgetInfo: {
              flex: 1,
            },
            budgetAmounts: {
              alignItems: 'flex-end',
            },
            budgetTotal: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#27AE60',
            },
            budgetSelectorContainer: {
              marginBottom: 15,
            },
            budgetSelector: {
              padding: 12,
              borderWidth: 1,
              borderColor: '#BDC3C7',
              borderRadius: 8,
              marginBottom: 8,
            },
            budgetSelectorText: {
              fontSize: 16,
              color: '#2C3E50',
              fontWeight: 'bold',
            },
            selectedBudgetText: {
              color: '#FFFFFF',
            },
            budgetBalance: {
              fontSize: 12,
              color: '#7F8C8D',
              marginTop: 4,
            },
            expenseList: {
              padding: 20,
              paddingTop: 0,
            },
            expenseHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 8,
            },
            expenseFooter: {
              flexDirection: 'row',
              justifyContent: 'space-between',
            },

            // Analytics Styles
            pageTitle: {
              fontSize: 24,
              fontWeight: 'bold',
              color: '#2C3E50',
              textAlign: 'center',
              padding: 20,
            },
            analyticsGrid: {
              flexDirection: 'row',
              padding: 20,
              paddingBottom: 10,
            },
            analyticsCard: {
              flex: 1,
              backgroundColor: '#FFFFFF',
              padding: 20,
              marginHorizontal: 5,
              borderRadius: 12,
              alignItems: 'center',
              elevation: 3,
            },
            analyticsNumber: {
              fontSize: 20,
              fontWeight: 'bold',
              color: '#FF6B35',
              marginBottom: 8,
            },
            analyticsLabel: {
              fontSize: 12,
              color: '#7F8C8D',
              textAlign: 'center',
            },
            categoryBreakdown: {
              padding: 20,
            },
            categoryItem: {
              backgroundColor: '#FFFFFF',
              padding: 16,
              marginBottom: 12,
              borderRadius: 8,
              elevation: 2,
            },
            categoryHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              marginBottom: 8,
            },
            categoryName: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#2C3E50',
            },
            categoryAmount: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#FF6B35',
            },
            categoryBar: {
              height: 8,
              backgroundColor: '#E0E0E0',
              borderRadius: 4,
              marginBottom: 4,
            },
            categoryProgress: {
              height: '100%',
              backgroundColor: '#FF6B35',
              borderRadius: 4,
            },
            categoryPercentage: {
              fontSize: 12,
              color: '#7F8C8D',
              textAlign: 'right',
            },
            insights: {
              padding: 20,
              paddingTop: 0,
            },
            insightCard: {
              backgroundColor: '#E8F5E8',
              padding: 16,
              borderRadius: 8,
              borderLeftWidth: 4,
              borderLeftColor: '#27AE60',
            },
            insightText: {
              fontSize: 16,
              color: '#2C3E50',
              lineHeight: 24,
            },

            // Challenges Styles
            userProgress: {
              backgroundColor: '#FFFFFF',
              margin: 20,
              padding: 20,
              borderRadius: 12,
              elevation: 3,
            },
            progressHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 16,
            },
            userLevel: {
              fontSize: 20,
              fontWeight: 'bold',
              color: '#FF6B35',
            },
            userPoints: {
              fontSize: 16,
              fontWeight: 'bold',
              color: '#27AE60',
            },
            levelProgress: {
              height: 12,
              backgroundColor: '#E0E0E0',
              borderRadius: 6,
              marginBottom: 8,
            },
            levelBar: {
              height: '100%',
              backgroundColor: '#FF6B35',
              borderRadius: 6,
            },
            nextLevel: {
              fontSize: 12,
              color: '#7F8C8D',
              textAlign: 'center',
            },
            challengesList: {
              padding: 20,
              paddingTop: 0,
            },
            challengeCard: {
              backgroundColor: '#FFFFFF',
              padding: 20,
              marginBottom: 16,
              borderRadius: 12,
              elevation: 2,
            },
            completedChallenge: {
              backgroundColor: '#E8F5E8',
              borderColor: '#27AE60',
              borderWidth: 2,
            },
            challengeHeader: {
              flexDirection: 'row',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: 8,
            },
            challengeTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#2C3E50',
              flex: 1,
            },
            challengePoints: {
              fontSize: 14,
              fontWeight: 'bold',
              color: '#FF6B35',
            },
            challengeDesc: {
              fontSize: 14,
              color: '#7F8C8D',
              lineHeight: 20,
              marginBottom: 8,
            },
            completedBadge: {
              alignSelf: 'flex-start',
              backgroundColor: '#27AE60',
              paddingHorizontal: 12,
              paddingVertical: 4,
              borderRadius: 12,
            },
            completedText: {
              color: '#FFFFFF',
              fontSize: 12,
              fontWeight: 'bold',
            },

            // Tips Styles
            tipsList: {
              padding: 20,
            },
            tipCard: {
              backgroundColor: '#FFFFFF',
              padding: 20,
              marginBottom: 16,
              borderRadius: 12,
              elevation: 2,
              borderLeftWidth: 4,
              borderLeftColor: '#FF6B35',
            },
            tipTitle: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 12,
            },
            tipContent: {
              fontSize: 14,
              color: '#7F8C8D',
              lineHeight: 22,
            },

            // Modal Styles
            modalOverlay: {
              flex: 1,
              backgroundColor: 'rgba(0, 0, 0, 0.5)',
              justifyContent: 'center',
              alignItems: 'center',
              padding: 20,
            },
            achievementModal: {
              backgroundColor: '#FFFFFF',
              padding: 30,
              borderRadius: 20,
              alignItems: 'center',
              maxWidth: 300,
              width: '100%',
            },
            achievementTitle: {
              fontSize: 24,
              fontWeight: 'bold',
              color: '#FF6B35',
              marginBottom: 16,
            },
            achievementIcon: {
              fontSize: 48,
              marginBottom: 16,
            },
            achievementName: {
              fontSize: 20,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 8,
              textAlign: 'center',
            },
            achievementDesc: {
              fontSize: 14,
              color: '#7F8C8D',
              textAlign: 'center',
              marginBottom: 20,
              lineHeight: 20,
            },
            achievementButton: {
              backgroundColor: '#FF6B35',
              paddingHorizontal: 24,
              paddingVertical: 12,
              borderRadius: 8,
            },
            achievementButtonText: {
              color: '#FFFFFF',
              fontSize: 16,
              fontWeight: 'bold',
            },
            adModal: {
              backgroundColor: '#FFFFFF',
              padding: 30,
              borderRadius: 20,
              alignItems: 'center',
              maxWidth: 320,
              width: '100%',
            },
            adClose: {
              position: 'absolute',
              top: 15,
              right: 15,
              width: 30,
              height: 30,
              borderRadius: 15,
              backgroundColor: '#E0E0E0',
              alignItems: 'center',
              justifyContent: 'center',
            },
            adCloseText: {
              fontSize: 16,
              color: '#2C3E50',
            },
            adTitle: {
              fontSize: 22,
              fontWeight: 'bold',
              color: '#2C3E50',
              marginBottom: 16,
              marginTop: 20,
              textAlign: 'center',
            },
            adDescription: {
              fontSize: 14,
              color: '#7F8C8D',
              textAlign: 'center',
              marginBottom: 16,
              lineHeight: 20,
            },
            adPrice: {
              fontSize: 18,
              fontWeight: 'bold',
              color: '#FF6B35',
              marginBottom: 20,
            },
            adUpgradeButton: {
              backgroundColor: '#FF6B35',
              paddingHorizontal: 24,
              paddingVertical: 16,
              borderRadius: 8,
              width: '100%',
            },
            adUpgradeText: {
              color: '#FFFFFF',
              fontSize: 16,
              fontWeight: 'bold',
              textAlign: 'center',
            },
          });

          export default App;
